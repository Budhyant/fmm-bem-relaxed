#pragma once
/** @file Direct.hpp
 * @brief Implementation of a general, direct matrix-vector multiplication
 * where the matrix elements are generated by a kernel, K
 */

template <typename Kernel>
void Direct(Kernel K,
            const std::vector<typename Kernel::point_type>& p,
	    const std::vector<typename Kernel::charge_type>& psi,
            std::vector<typename Kernel::range_type>& omega)
{
  // Only symmetric for now... TODO
  static_assert(Kernel::is_symmetric, "Direct only handles symmetric kernels");

  int N = p.size();
  for (int m = 0; m < N; ++m) {
    const typename Kernel::point_type& pm = p[m];
    omega[m] = 0;
    for (int n = 0; n != m; ++n) {
      double r = (pm-p[n]).magnitude();
      typename Kernel::range_type E = K(r);
      omega[m] += psi[n] * E;
      omega[n] += psi[m] * E;
    }
  }
}
